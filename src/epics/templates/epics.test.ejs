import { expect } from 'chai';
import { ActionsObservable } from 'redux-observable';
import { TestScheduler } from 'rxjs';
import actions from 'shared/redux/actions';
import <%= epicsName %> from './<%= filename %>';

const [
  <% epics.forEach((epic)=>{ %><%= epic.name %>, <% }); %>
] = <%= epicsName %>;

describe('<%= epicsName %>', () => {

  <% epics.forEach((epic)=>{ %>describe('<%= epic.name %>', () => {
    <% if (epic.type === 'ajax') { %>it('returns token and user attributes', () => {
      const testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).to.deep.equal(expected);
      });

      const actionPayload = {
        // TODO
      };
      const action$ = new ActionsObservable(
        testScheduler.createHotObservable('(a|)', {
          a: actions.<%= epic.actionPath %>(actionPayload)
        })
      );

      const responseData = {
        // TODO
      };
      const response$ = testScheduler.createColdObservable('-a|', {
        a: responseData
      });
      const test$ = <%= epic.name %>(action$, undefined, (payload) => {
        expect(payload).to.deep.equal(actionPayload);
        return response$;
      });
      testScheduler.expectObservable(test$).toBe('-a|', {
        a: actions.<%= epic.successActionPath %>(responseData)
      });
      testScheduler.flush();
    });

    it('throws error on failure', () => {
      const testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).to.deep.equal(expected);
      });

      const actionPayload = {
        // TODO
      };
      const action$ = new ActionsObservable(
        testScheduler.createHotObservable('(a|)', {
          a: actions.<%= epic.actionPath %>(actionPayload)
        })
      );

      const errorMessage = undefined; // TODO
      const response$ = testScheduler.createColdObservable('-#', null, errorMessage);
      const test$ = loginEpic(action$, undefined, (payload) => {
        expect(payload).to.deep.equal(actionPayload);
        return response$;
      });
      testScheduler.expectObservable(test$).toBe('-(a|)', {
        a: actions.<%= epic.errorActionPath %>(errorMessage)
      });
      testScheduler.flush();
    });<% } else { %>
    it('properly implements Redux Observable interface', ()=>{
      const testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).to.deep.equal(expected);
      });

      const actionPayload = {
        // TODO
      };
      const action$ = new ActionsObservable(
        testScheduler.createHotObservable('(a|)', {
          a: actions.<%= epic.actionPath %>(actionPayload)
        })
      );

      // TODO implement RXJS behavior
      testScheduler.flush();
    });<% } %>
  });
  <% }); %>
});
